import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})

export class AppComponent {
   // Variable to store the name of a new member entered by the user
   newMemberName = '';

   // Array to store the names of all members entered by the user
   members: string[] = [];
 
   // Variable to store any error message to be displayed to the user
   errorMessage = '';
 
   // Variable to store the number of teams entered by the user
   numberOfTeams: number | null = null;
 
   // Array to store the teams generated by the app
   teams: string[][] = [] 
 
   // Function to update the value of 'newMemberName' when the user types in the input box
   onInput(member: string) { 
     this.newMemberName = member;
   }
   
   // Function to update the value of 'numberOfTeams' when the user types in the input box
   onNumberOfTeamsInput(value: string) {
     // Parse the input value as an integer
     const numTeams = parseInt(value, 10);
     if (isNaN(numTeams) || numTeams <= 0) {
       // If the input value is not a valid integer, set 'numberOfTeams' to null
       this.numberOfTeams = null;
     } else {
       // Otherwise, set 'numberOfTeams' to the parsed integer value
       this.numberOfTeams = numTeams;
     }
   }
 
   // Function to add a new member to the 'members' array
   addMember() {
     if(!this.newMemberName) {
       // If the name entered by the user is empty, display an error message
       this.errorMessage = "Name can't be empty"
       return
     }
 
     // Add the new member to the 'members' array
     this.members.push(this.newMemberName);
 
     // Reset the input box to be empty
     this.newMemberName= '';
 
     // Clear any previous error message
     this.errorMessage= '';
   }

  // Function to generate teams based on the number of teams and members entered by the user
  generateTeams() {
    // Check if there are members to generate teams from
    if (!this.members.length) {
      this.errorMessage = "Please add at least one member.";
      return;
    }

    // Check if a valid number of teams has been provided
    if (!this.numberOfTeams || this.numberOfTeams <= 0) {
      this.errorMessage = "Please provide a valid number of teams.";
      return;
    }

    // Make a copy of the members array to avoid modifying the original
    const allMembers = [...this.members];
    
    // Check if there are enough members and teams to generate
    if (allMembers.length < this.numberOfTeams) {
      this.errorMessage = "Not enough members to generate teams";
      return;
    }

    // Calculate how many members should be in each team
    const membersPerTeam = Math.floor(allMembers.length / this.numberOfTeams);

    // Calculate the number of remaining members
    const remainingMembers = allMembers.length % this.numberOfTeams;

    // Initialize the teams array
    this.teams = [];

    // Generate teams
    let remainingCount = remainingMembers;
    for (let i = 0; i < this.numberOfTeams; i++) {
      // Initialize an empty array for each team
      this.teams[i] = [];
      
      // Randomly select members for each team
      for (let j = 0; j < membersPerTeam; j++) {
        // Generate a random index within the array of remaining members
        const randomIndex = Math.floor(Math.random() * allMembers.length);

        // Remove the selected member from the remaining members array and add it to the current team
        const member = allMembers.splice(randomIndex, 1)[0];
        this.teams[i].push(member);
      }

      // Distribute remaining members evenly among the teams
      if (remainingCount > 0) {
        // Generate a random index within the array of remaining members
        const randomIndex = Math.floor(Math.random() * allMembers.length);

        // Remove the selected member from the remaining members array and add it to the current team
        const member = allMembers.splice(randomIndex, 1)[0];
        this.teams[i].push(member);
        remainingCount--;
      }
    }

    // Clear the error message
    this.errorMessage = "";
}

}